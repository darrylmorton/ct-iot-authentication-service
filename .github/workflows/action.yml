name: Build, Lint, Tests

on:
  workflow_call:
    inputs:
      test-unit:
        description: "Unit test command to run"
        required: false
        type: boolean
    outputs:
      poetry_cache_key:
        description: "Cache key for Poetry dependencies"
        value: ${{ jobs.build.outputs.poetry_cache_key }}
      app_version:
          description: "Application version"
          value: ${{ jobs.build.outputs.app_version }}
    secrets:
      repo-token:
        required: true

env:
  PYTHON_VERSION: '3.11.9'
  POETRY_VERSION: '1.7.1'
  SENTRY_TRACES_SAMPLE_RATE: 1.0
  SENTRY_PROFILES_SAMPLE_RATE: 0.5
  SENTRY_SAMPLE_RATE: 50
  SERVICE_NAME: authentication-service
  LOG_LEVEL: DEBUG
  ENVIRONMENT: test
  UVICORN_PORT: 8001
  JWT_AUTHENTICATION_SECRET: ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
  JWT_AUTHENTICATION_EXPIRY_SECRETS: 3600
  JWT_CONFIRM_ACCOUNT_SECRET: ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABC
  JWT_CONFIRM_ACCOUNT_EXPIRY_SECONDS: 3600

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      poetry_cache_key: ${{ steps.cached_poetry_dependencies_step.outputs.poetry_cache_key }}
      app_version: ${{ steps.app_version_step.outputs.app_version }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Generate Cache Key
        id: cached_poetry_dependencies_step

        run: |
          poetry_cache_key="venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('poetry.lock') }}"
          echo "poetry_cache_key=$poetry_cache_key" >> "$GITHUB_OUTPUT"

      - name: Load cached venv
        id: cached_poetry_dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ steps.cached_poetry_dependencies_step.outputs.poetry_cache_key }}

      - name: Install dependencies
        if: steps.cached_poetry_dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run version check script
        id: app_version_step
        env:
          REPO: ${{ github.repository }}
        run: |
          latest_release_version=$(curl -s https://api.github.com/repos/$REPO/releases/latest | jq -r .tag_name)
          echo "Latest release: $latest_release_version"
          poetry run python scripts/check_version.py --latest-release-version $latest_release_version
          app_version=$(poetry run python scripts/app_version.py)
          echo "app_version=$app_version" >> "$GITHUB_OUTPUT"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ needs.build.outputs.poetry_cache_key }}

      - name: Run lint
        run: make lint

  test-unit:
    if: inputs.test-unit == true
    name: Unit tests
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ needs.build.outputs.poetry_cache_key }}

      - name: Run unit tests
        run: make test-unit
